
import java.util.*;
import java.net.*;
import java.io.*;
import java.nio.*;
import java.nio.file.Files;


public class Servidor {
    public static void main (String[] args) {

        Scanner stdIn = new Scanner(System.in);

        try{

            ServerSocket ss = new ServerSocket(6666);

            ArrayList<Socket> Clientes = new ArrayList<Socket>();

            ArrayList<String> Direcciones = new ArrayList<String>();
            ListenSocketThread ListenSockets = new ListenSocketThread(ss, Clientes, Direcciones);
            ListenSockets.start();

            while(true){ //Este while true está construido para que, si se pierde la conexión  inesperadamente, no se
                //pierda todo el programa y se pueda reconectar a otro socket.

                try{

                    System.out.println("Escoga un cliente:");

                    Socket s = Clientes.get(stdIn.nextInt());

                    DataOutputStream dout = new DataOutputStream(s.getOutputStream());
                    DataInputStream dint = new DataInputStream(s.getInputStream());

                    ListenMessagesThread ListenMessages = new ListenMessagesThread(s,dint,dout);
                    ListenMessages.start();

                    byte[] mensajeByte;
                    String mensaje;

                    String conexion = "1";
                    byte[] conexionByte = conexion.getBytes();

                    dout.writeInt(conexionByte.length);
                    dout.write(conexionByte);

                    while(true){

                        System.out.println("Esperando una instrucción");

                        mensaje = stdIn.next();
                        mensajeByte = mensaje.getBytes();

                        if (mensajeByte[0]==83){ /* Después de conectar el socket al servidor y recoger en un array de bytes analizamos antes de nada si queremos cambiar 
                            de socket. Si hemos puesto */

                            System.out.println("Cambio de Socket");
                            dout.writeInt(mensajeByte.length);
                            dout.write(mensajeByte);

                            Thread.sleep(1000);

                            boolean hilocerrado = dint.readBoolean();

                            for(int i = 0; i < Clientes.size(); i++){ /*Mostramos un menú con todos los sockets y si están o no conectados aprovechándonos del beaconing 
                                 después de haber cerrado el thread de escucha de mensajes mediante un intercambio de booleans que nos asegura que el hilo no se cierra
                                 más tarde de la cuenta.*/ 

                                try{

                                    s = Clientes.get(i);
                                    s.setSoTimeout(6*1000);

                                    dint = new DataInputStream(s.getInputStream());
                                    
                                    dint.readInt();
                                    dint.readFully(mensajeByte);

                                    System.out.println(Clientes.get(i) + " " + Direcciones.get(i) + ": Conectado");

                                } catch (Exception e) {

                                    System.out.println(Clientes.get(i) + " " + Direcciones.get(i) + ": Desconectado.");
                                    
                                } 

                            }
                           
                            System.out.println("Fin de lista.");

                             /*Una vez mostrada la lista elegimos un socket y procedemos a renovar los Streams con el mismo y posteriormente a volver a construir
                             el hilo de escucha (esto es necesario puesto que una vez el hilo de escucha se inicia, no se puede cambiar el socket hacia el que va dirigido
                             el stream, por tanto, es necesario cerrar el hilo y volver a iniciarlo cadavez que cambiamos de socket).*/

                            s = Clientes.get(stdIn.nextInt()); 

                            dout = new DataOutputStream(s.getOutputStream());

                            ListenMessages = new ListenMessagesThread(s, new DataInputStream(s.getInputStream()), new DataOutputStream(s.getOutputStream()));
                            ListenMessages.start();

                            mensaje ="1"; /*Una vez hemos terminado de construir las herramientas mandamos un 1 en bytes para dar a entender al socket que nos hemos puesto
                            en contacto con él y le estamos escuchando.*/

                            mensajeByte = mensaje.getBytes();
                            dout.writeInt(mensajeByte.length); 
                            dout.write(mensajeByte); 

                        } else {

                            for (int i = 0; i < 3; i++){ /*De lo contrario, incorporamos un bucle para cambiar los 3 primeros dígitos (que son por otra parte el 
                                encabezado) del array de bytes y transformarlos en los bytes correspondientes. */ 
    
                                switch (mensajeByte[i]) {

                                    case 48:

                                        mensajeByte[i]=0x00;

                                        break;
    
                                    case 49:
    
                                        mensajeByte[i]=0x01;
    
                                        break;
    
                                    case 50:
    
                                        mensajeByte[i]=0x02;
    
                                        break;
    
                                    case 51:
    
                                        mensajeByte[i]=0x03;
    
                                        break;
    
                                    default:

                                        System.out.println("Estructura de mensaje no válido.");
                                        System.exit(0);
    
                                        break;
    
                                }
    
                            }
                            
                            if(mensajeByte[0]==0x02 && mensajeByte[1]==0x00 ){

                                System.out.println("    Conectado a la terminal del cliente.");
                                System.out.println(" ");

                                dout.writeInt(mensajeByte.length);
                                dout.write(mensajeByte);
                                  
                                try{
                                
                                    byte[] array = new byte[8000];
                                    int b;
                                    System.out.println("Escriba 'exit' y oulse enter para empezar.");
                                    byte[] array2 = new byte[4000];
                                    int c = System.in.read(array2,0, array2.length);
                                    byte[] salida = array2;
                    
                                    boolean conexionT = true;
                    
                                    
                                    
                                    while(conexionT == true){
                    
                                        
                                        //A continuacion se muestra el bucle a través del cual envíamos al cliente el input del programa. En primer lugar generamos la estructura de un array de bytes donde almacenaremos el flujo de bytes correspondientes al input de nuestro teclado y luego se transporta el tamaño del array y el array en sí al cliente y este lo introduce como input al proceso.
                                        
                                        System.out.println("Recogiendo datos...");
                                        b = System.in.read(array,0, array.length);

                                        System.out.println(new String(array));
                                        System.out.println(new String(salida));
                    
                                        if (array[0]==salida[0]){

                                            System.out.println(new String(array));
                                            System.out.println(new String(salida));
                    
                                            conexionT = false;
                    
                                            System.out.println("Conexion cerrada.");
                                        }
                                        //El método .read(byte[] array, int a, int b) de System.in almacena en el array 'array' desde el offset a al offset b el flujo de bytes que se leen desde el teclado.
                                        
                                        System.out.println("Mandando el size...");
                                        dout.writeInt(b); //Se manda el 'size' del array y el mismo array.
                                        dout.flush();			
                                        System.out.println("Mandando el array...");
                                        dout.write(array);
                                        dout.flush();
                    
                                  
                                                  
                                     }
                    
                                 System.out.println("Se ha cerrado la conexion con la terminal.");
                            
                                } catch (Exception e) {} //Fin del try/if/exec cmd


                            } else if ( mensajeByte[0]==0x03 && mensajeByte[1]==0x00){

                                System.out.println("Quiere subir o bajar un archivo.");

                                String[] partes = mensaje.split("_");

                                System.out.println("Mensaje dividido.");

                                mensajeByte = new byte[3];

                                mensajeByte[0]=0x03;
                                mensajeByte[1]=0x00;
                                mensajeByte[2]=0x00;

                                dout.writeInt(mensajeByte.length); /*Se envía la cabecera para informar al 
                                cliente de que se va a envíar un archivo y que prepare al hilo de escucha.*/
                                dout.write(mensajeByte);

                                System.out.println("Enviada cabecera: " + new String(mensajeByte));

                                dout.writeBoolean(true);

                                try{

                                    File pathFile = new File(partes[1]); 
                                    System.out.println("Obtenido el file");
                                    byte[] arrayFile = Files.readAllBytes(pathFile.toPath());
                                    System.out.println("Obtenidos los files del byte");

                                    /* Se recogen los bytes asociados a nuestro file. Las barras para construir
                                    los bytes deben de ser inclinadas hacia la derecha '/'. */
                                    
                                    dout.writeInt(arrayFile.length);
                                    System.out.println("Size del fichero enviado.");
                                    
                                    dout.write(arrayFile);
                                    System.out.println("Fichero enviado.");

                                    dout.writeBoolean(true);
                                
                                } catch (Exception y){

                                    System.out.println("Error al obtener los bytes del file.");
                                    System.exit(0);
                                } //Fin del try "mandar file".
                        
                                dout.writeInt(partes[2].getBytes().length);
                                dout.write(partes[2].getBytes());

                            } else {

                                dout.writeInt(mensajeByte.length);
                                dout.write(mensajeByte);

                            }

                        }
                    }

                }catch (Exception t){

                    System.out.println("Se ha perdido la conexion con el cliente.");

                    for(int i = 0; i < Clientes.size(); i++){

                        try{

                            Socket s = Clientes.get(i);
                            ss.setSoTimeout(5*1000);
                            
                            DataInputStream dint = new DataInputStream(s.getInputStream());
                            
                            byte[] mensajeByte = new byte[dint.readInt()];
                            dint.readFully(mensajeByte);

                            System.out.println(Clientes.get(i) + " " + Direcciones.get(i) + ": Conectado");

                        } catch (Exception e) {

                            System.out.println(Clientes.get(i) + " " + Direcciones.get(i) + ": Desconectado.");
                            
                        } 

                    }

                }

            }

        } catch (Exception e) {}   

    }

}