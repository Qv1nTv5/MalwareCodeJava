
import java.util.*;
import java.net.*;
import java.io.*;

public class ListenMessagesThread extends Thread {

    public DataInputStream dint; 

    public DataOutputStream dout;

    public Socket s;

    public ListenMessagesThread (Socket s, DataInputStream dint, DataOutputStream dout) {

        this.dint = dint;

        this.dout = dout;

        this.s = s;
    }

    public void run() {

        boolean conexion = true;

        System.out.println("Hilo de escucha iniciado.");

        while(conexion==true){

            try{
        
                
                byte[] mensajeByte = new byte[dint.readInt()];
                
                s.setSoTimeout(500); /* Algunas veces se puede escapar el envío de un entero (el tamaño de algún array) pero no se termina de envíar el array y eso
                genera que el código se quede atascado. Esto se corrige de la siguiente manera: programamos que, si una vez recibido el entero inmediatamente después no se
                recibe ningún array de bytes, entonces lanza una excepción. 
                
                De esta forma evitamos que el codigo se atasque escuchando un array de bytes que no llega nunca.*/

                this.dint.readFully(mensajeByte, 0, mensajeByte.length);
                s.setSoTimeout(0);

               if(mensajeByte[0]==83){ /*Si lo que recibimos es una S, entonces se quiere cambiar de socket y cerramos el hilo cambiando el valor del boolean y 
                 enviando devuelta dicho valor para informar al cliente que el hilo de escucha se debe cerrar.*/

                
                    conexion = false;
                    dout.writeBoolean(true);

                    System.out.println("Hilo cerrado.");

               } else if (mensajeByte[0]==0x00){ //Si el único contenido del array es un 0 hex, se trata del beaconing y nos interesa descartarlo.

               } else {

                    System.out.println(new String(mensajeByte));    
                    
                   

               }

            } catch (Exception e) {}

        }

    }

}